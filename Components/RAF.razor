@implements IDisposable
@inject IJSRuntime JS
@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public required Action<TimeSpan> OnFrame { get; set; }
    private IJSInProcessObjectReference? module;
    private TimeSpan last;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSInProcessObjectReference>("import", "./Components/RAF.razor.js");
            module.InvokeVoid("start", DotNetObjectReference.Create(this));
        }
    }

    public void Dispose()
    {
        module?.InvokeVoid("stop");
    }

    [JSInvokable]
    public void NotifyFrame(double timestampMilliseconds)
    {
        var timestamp = TimeSpan.FromMilliseconds(timestampMilliseconds);
        if (last != TimeSpan.Zero)
        {
            var diff = timestamp.Subtract(last);
            OnFrame?.Invoke(diff);
        }
        last = timestamp;

        StateHasChanged();
    }
}

@ChildContent